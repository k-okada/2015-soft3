#!/usr/bin/env irteusgl

(load "lib/llib/unittest.l")
(init-unit-test)
(send *unit-test* :clear-result)
;; DO NOT EDIT BEFORE THIS LINE
;(load "renshu-3.l")
;; 4)
;; cascaded-linkを使ったモデルを用いてアニメーションさせてみよ．その際必ず２つ以上の物体を画面に配置し，assoc/dissocが行われること．
(defclass cascaded-link
  :super cascaded-coords
  :slots (links joint-list bodies collision-avoindance-links))
(defmethod cascaded-link
  (:init (&rest args &key name &allow-other-keys)
	 (send-super-lexpr :init args)
	 self)
  (:init-ending
   ()
   (setq bodies (flatten (send-all links :bodies)))
   (dolist (j joint-list)
     (send (send j :child-link) :add-joint j)
     (send (send j :child-link) :add-parent-link (send j :parent-link))
     (send (send j :parent-link) :add-child-links (send j :child-link)))
   (send self :update-descendants))
)

(defclass xytable
  :super cascaded-link
  :slots (xslider yslider zslider endlink jx jy jz))
(defmethod xytable
  (:init ()
	 (let ()
	   (send-super :init)
	   (setq xsl1 (make-xslider))
	   (setq xsl2 (make-xslider))
	   (send xsl1 :locate #f(0 240 0))
	   (send xsl2 :locate #f(0 -240 0))
	   (setq xslider (instance bodyset-link :init (make-cascoords) :bodies (list xsl1 xsl2)))
	   (setq yslider (instance bodyset-link :init (make-cascoords) :bodies (list (make-yslider))))
	   (setq zslider (instance bodyset-link :init (make-cascoords) :bodies (list (make-zslider))))
	   (setq endlink (instance bodyset-link :init (make-cascoords) :bodies (list (make-endlink))))
	   (send yslider :locate #f(0 0 15))
	   (send zslider :locate #f(0 -15 -7.5))
	   (send endlink :locate #f(0 7.5 0))
	   (setq jx (instance linear-joint :init :parent-link xslider :child-link yslider :axis :x))
	   (setq jy (instance linear-joint :init :parent-link yslider :child-link zslider :axis :y))
	   (setq jz (instance linear-joint :init :parent-link zslider :child-link endlink :axis :z))
	   
	   (send jx :max-angle 250)
	   (send jx :min-angle -250)
	   (send jy :max-angle 250)
	   (send jy :min-angle -250)
	   (send jz :max-angle 0)
	   (send jz :min-angle -40)
	   (setq links (list xslider yslider zslider endlink))
	   (setq joint-list (list jx jy jz))
	   
	   (send self :assoc xslider)
	   (send xslider :assoc yslider)
	   (send yslider :assoc zslider)
	   (send zslider :assoc endlink)
	   (send self :init-ending)
	   (send self :angle-vector #f(0 0 0))
	   self))
  (:jx (&rest args) (forward-message-to jx args))
  (:jy (&rest args) (forward-message-to jy args))
  (:jz (&rest args) (forward-message-to jz args))
  (:endlink (&rest args) (forward-message-to endlink args))
  )
(defun make-xslider nil
  (make-cube 500 10 10)
  )

(defun make-yslider nil
  (let (tmp1 tmp2 tmp3 tmp4)
    (setq tmp1 (make-cube 10 500 10))
    (setq tmp2 (make-cube 20 20 5))
    (setq tmp3 (make-cube 20 20 5))
    (send tmp2 :locate #f(0 -240 -7.5))
    (send tmp3 :locate #f(0 240 -7.5))
    (setq tmp4 (body+ tmp1 tmp2 tmp3))
    tmp4))
(defun make-zslider nil
  (let (z1 z2 z)
    (setq z1 (make-cube 20 20 5))
    (setq z2 (make-cube 10 10 60))
    (send z2 :locate #f(0 0 -32.5))
    (setq z (body+ z1 z2))
    z))
(defun make-endlink nil
  (let (endlink)
    (setq endlink (make-cube 20 5 20))
    (send endlink :locate #f(0 0 -20))
    endlink))

(defun moveto (dest speed)
  (let (i per now srcx srcy srcz dist tovect dividenum)
    (setq srcx (send xy :jx :joint-angle))
    (setq srcy (send xy :jy :joint-angle))
    (setq srcz (send xy :jz :joint-angle))
    (setq now (float-vector srcx srcy srcz))
    (setq dist (distance now dest))
    (setq dividenum (floor (/ dist speed)))
    (setq tovect (v- dest now))

    (dotimes (i (- dividenum 1))
      (setq per (/ (* 1.0 (+ i 1)) dividenum))
      (send xy :angle-vector (v+ now  (scale per tovect)))
      (send *irtviewer* :draw-objects)
      (x::window-main-one)
      )
    (send xy :angle-vector dest)
    (send *irtviewer* :draw-objects)
    (x::window-main-one)
  ))
(defun make-hand nil
  (let (tmp1 tmp2 tmp3)
    (setq tmp1 (make-cube 30 10 50))
    (setq tmp2 (make-cube 10 10 10))
    (send tmp2 :locate #f(0 0 -20))
    (setq tmp3 (body- tmp1 tmp2))
    (setq tmp1 (make-cube 10 10 30))
    (send tmp1 :locate #f(10 0 10))
    (setq hand (body- tmp3 tmp1))
    (send tmp1 :locate #f(-20 0 0))
    (setq hand (body- hand tmp1))
    (send hand :locate #f(0 0 -30))
    hand
  ))

(setq xyspeed 40)
(setq numofcubes 10)
(setq zspeed 8)

(setq xy (instance xytable :init))
(setq cyl (make-cube 500 500 5))
(send cyl :locate #f(0 0 -100))
(setq hand (make-hand))
(send (send xy :endlink) :assoc hand)

(setq poles '())
(dotimes (i 4)
  (push (make-cylinder 5 100) poles)
  )
(send (elt poles 0) :locate #f(245 240 -100))
(send (elt poles 1) :locate #f(245 -240 -100))
(send (elt poles 2) :locate #f(-245 240 -100))
(send (elt poles 3) :locate #f(-245 -240 -100))

(setq cubes '())
(dotimes (i numofcubes)
  (push (make-cube 10 10 10 :pos (float-vector (- (random 400) 200) (- (random 400) 200) -95)) cubes)
  (send (elt cubes 0) :set-color :yellow)
  )

(setq objs (append (list xy cyl hand) cubes))
(setq objs (append objs poles))
(objects objs)

(setq time 0)
(dotimes(i 2)
 (dotimes (i 10)
   (setq destcube (elt cubes i))
   (setq destcube_pos (send destcube :pos))
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) 0) xyspeed)      
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) -40) zspeed)
   (send (send xy :endlink) :assoc (elt cubes i))
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) 0) zspeed)
   
   (setq dest (float-vector -200 (+ -200 (* i 12) ) 0))
   (moveto dest xyspeed)
   (moveto (v+ dest #f(0 0 -40)) zspeed)
   (send (send xy :endlink) :dissoc (elt cubes i))
   (moveto dest zspeed)
		 
   (send *irtviewer* :draw-objects)
   (x::window-main-one)
)
 (dotimes (i 10)
   (setq destcube (elt cubes i))
   (setq destcube_pos (send destcube :pos))
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) 0) xyspeed)      
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) -40) zspeed)
   (send (send xy :endlink) :assoc (elt cubes i))
   (moveto (float-vector (elt destcube_pos 0) (elt destcube_pos 1) 0) zspeed)
   
   (setq dest (float-vector (- (random 400) 200) (- (random 400) 200) 0))
   (moveto dest xyspeed)
   (moveto (v+ dest #f(0 0 -40)) zspeed)
   (send (send xy :endlink) :dissoc (elt cubes i))
   (moveto dest zspeed)
		 
   (send *irtviewer* :draw-objects)
   (x::window-main-one)
   )
)

; DO NOT EDIT AFTER THIS LINE
(send *unit-test* :print-result)
(exit 1)





