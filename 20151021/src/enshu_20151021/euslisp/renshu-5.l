#!/usr/bin/env irteusgl

(load "lib/llib/unittest.l")
(init-unit-test)
(send *unit-test* :clear-result)
;; DO NOT EDIT BEFORE THIS LINE


;; 5)
;; 6自由度以上のアームを作りrotation-axis（や冗長自由度）を利用したサンプルプログラムを書いてみよ．

(defun make-hinji ()
  (let ((b1 (make-cube 26 20 54))
	(b2 (make-cube 22 16 58)))
    (send b2 :locate #f(-4 0 0))
    (setq b2 (body- b2 b1))
    (send b2 :set-color :red)
    b2))

(defun make-servo ()
  (let ((b1 (make-cube 35 20 46))
	(b2 (make-cylinder 3 60)))
    (send b1 :locate #f(9.5 0 0))
    (send b2 :locate #f(0 0 -30))
    (setq b1 (body+ b1 b2))
    (send b1 :set-color :blue)
    b1))

(defun make-piston ()
  (let ((b1 (make-cube 20 46 70))
	(b2 (make-cylinder 3 85)))
    (setq b1 (body+ b1 b2))
    (send b1 :set-color :green)
    b1))

(defun make-pcylinder ()
  (let ((b1 (make-cube 20 46 70))
	(b2 (make-cylinder 3 60)))
    (send b2 :locate #f(0 0 -35))
    (setq b1 (body- b1 b2))
    (send b1 :set-color :yellow)
    b1))

(defclass 6dof-sample-arm
  :super cascaded-link
  :slots (base l1 l2 l3 l4 l5 l6 j1 j2 j3 j4 j5 j6 end-coords))

(defmethod 6dof-sample-arm
  (:init ()
	 (send-super :init)
	 (let (h s)
	   (setq h (make-hinji))
	   (send h :locate #f(42 0 0))
	   (setq s (make-servo))
	   (send s :assoc h)
	   (setq l6 (instance bodyset-link :init (make-cascoords) :bodies (list s h)))
	   (setq end-coords (make-cascoords :pos #f(49 0 0)))
	   (send l6 :assoc end-coords)
	   (send l6 :locate #f(42 0 0))
	   (setq h (make-hinji))
	   (send h :locate #f(42 0 0))
	   (send h :assoc l6)
	   (send h :rotate #d90 :x)
	   (setq s (make-servo))
	   (send s :assoc h)
	   (setq l5 (instance bodyset-link :init (make-cascoords) :bodies (list s h)))
	   (send l5 :assoc l6)
	   (setq h (make-hinji))
	   (send h :assoc l5)
	   (send h :locate #f(0 0 15))
	   (send h :rotate #d270 :y)
	   (setq l4 (instance bodyset-link :init (make-cascoords) :bodies (list h)))
	   (send l4 :assoc l5)
	   (send l4 :rotate #d90 :y)
	   (send l4 :locate #f(0 0 27))
	   (setq s (make-servo))
	   (setq l3 (instance bodyset-link :init (make-cascoords) :bodies (list s)))
	   (send l3 :assoc l4)
	   (setq h (make-hinji))
	   (send h :assoc l3)
	   (send h :rotate #d90 :x)
	   (send h :locate #f(42 0 0))
	   (setq s (make-servo))
	   (send s :assoc h)
	   (setq l2 (instance bodyset-link :init (make-cascoords) :bodies (list s h)))
	   (send l2 :assoc l3)
	   (setq h (make-hinji))
	   (send h :assoc l2)
	   (send h :locate #f(0 0 15))
	   (send h :rotate #d180 :z)
	   (send h :rotate #d270 :y)
	   (setq l1 (instance bodyset-link :init (make-cascoords) :bodies (list h)))
	   (send l1 :assoc l2)
	   (send l1 :locate #f(0 0 5))

	   (setq base (instance bodyset-link :init (make-cascoords) :bodies (list (make-cube 300 300 10))))
	   (setq j1 (instance rotational-joint :init :parent-link base :child-link l1 :axis :z))
	   (setq j2 (instance rotational-joint :init :parent-link l1 :child-link l2 :axis :z))
	   (setq j3 (instance rotational-joint :init :parent-link l2 :child-link l3 :axis :z))
	   (setq j4 (instance rotational-joint :init :parent-link l3 :child-link l4 :axis :z))
	   (setq j5 (instance rotational-joint :init :parent-link l4 :child-link l5 :axis :z))
	   (setq j6 (instance rotational-joint :init :parent-link l5 :child-link l6 :axis :z))
	   (setq links (list base l1 l2 l3 l4 l5 l6))
	   (setq joint-list (list j1 j2 j3 j4 j5 j6))
	   (send self :init-ending)
	   (send self :reset-pose))
	 )

  (:j1 (&rest args) (forward-message-to j1 args))
  (:j2 (&rest args) (forward-message-to j2 args))
  (:j3 (&rest args) (forward-message-to j3 args))
  (:j4 (&rest args) (forward-message-to j4 args))
  (:j5 (&rest args) (forward-message-to j5 args))
  (:j6 (&rest args) (forward-message-to j6 args))
  (:l1 (&rest args) (forward-message-to l1 args))
  (:l2 (&rest args) (forward-message-to l2 args))
  (:l3 (&rest args) (forward-message-to l3 args))
  (:l4 (&rest args) (forward-message-to l4 args))
  (:l5 (&rest args) (forward-message-to l5 args))
  (:l6 (&rest args) (forward-message-to l6 args))
  (:end-coords (&rest args) (forward-message-to end-coords args))
  (:reset-pose ()
	       (send self :angle-vector #f(0 0 0 0 90 0)))
  )

(setq *model* (instance 6dof-sample-arm :init))
(setq *target* (make-cascoords :pos #f(91 0 104)))
(print (send *model* :end-coords :worldpos))
(objects (list *model* (send *model* :end-coords) *target*))
(send *target* :locate #f(-20 20 -30))
(send *target* :rotate #d30 :y)
(do-until-key
 (send *model* :inverse-kinematics *target*
       :link-list (send *model* :link-list (send *model* :end-coords :parent))
       :move-target (send *model* :end-coords)
       :translation-axis t
       :rotation-axis nil
       :revert-if-fail nil)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1)
 (send *model* :reset-pose)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1)
 (send *model* :inverse-kinematics *target*
       :link-list (send *model* :link-list (send *model* :end-coords :parent))
       :move-target (send *model* :end-coords)
       :translation-axis t
       :rotation-axis t
       :revert-if-fail nil)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1)
 (send *model* :reset-pose)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1)
 (send *model* :inverse-kinematics *target*
       :link-list (send *model* :link-list (send *model* :end-coords :parent))
       :move-target (send *model* :end-coords)
       :translation-axis nil
       :rotation-axis t
       :revert-if-fail nil)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1)
 (send *model* :reset-pose)
 (send *irtviewer* :draw-objects)
 (x::window-main-one)
 (unix::sleep 1))

;; DO NOT EDIT AFTER THIS LINE
(send *unit-test* :print-result)
(exit 1)




