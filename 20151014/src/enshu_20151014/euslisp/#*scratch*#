;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

(defun dots (n)
  (dotimes (i n) (princ "\."))
)
dots


(dots 4)

(defun dots2 (n) 
  (if (= n 0)
      nil
    (progn
      (princ "\.")
      (dots2 (1- n)))))

..."."


aaaaaa"aa"

(setq list  '(11 2 "a" 4))
(11 2 "a" 4)

(11 2 3 4)

(11 2 3 4)
(setq list (cdr list))
(c
(4)

(3 4)

(2 3 4)



(defun ass (list)
  (setq num 0)
  (dotimes (i 5)
    (if (= (car list) 1) (progn (setq num (+ 1 num))))
      (setq list (cdr list)))
num)
ass

ass

ass


(defun asses (list)
  (setq num 0)
  (if (= (length list) 0) 0 (progn
				(if (= 1 (car list)) (setq num (+ 1 num)) num) 
				(setq num (+ num (asses (cdr list)) ))
				)
      )
(setq num 0)
  (dotimes (i 5)
    (if (= (car list) 1) (progn (setq num (+ 1 num))))
      (setq list (cdr list)))
num)
 
(setq lis '(1 2 nil 3))
(1 2 nil 3)


(remove nil lis)
(1 2 3)

(setq lis '(1 2 3))
(1 2 3)
lis
(1 2 3)

(1 2 3)


kus



(apply #'+ lis)
(defun summit (lst)
  (setq lst (remove nil lst))
  (apply #'+ lst))


(summit '(1 2 3 nil))

(defun summit2 (lst)
  (if (= 0 (length lst)) () (progn
  (let ((x (car lst)))
    (if (eq nil x)
	(summit2 (cdr lst))
      (+ x (summit2 (cdr lst))))))))
summit2


summit2

summit2


summit2

(summit2 '(1 2 3))
































(1 2 3)

(1 2 3)




  )
asses

asses

asses
(asses '(1 2 1))
2

1







nil

















"num"
3


"num"
1




















ass



(dots2 5)

(defun fact(x)
(if (= 0 x)
    1
  (* x (fact (1- x)))))
fact
(fact 5)
120








(format t "list ~A ~%" 1)
(print "echo" )

"echo"
"echo"
(progn
  (dotimes (1 3)
    (print "\.")
    )
  )

(dotimes (i 3)(princ "\."))
...nil

(setq j 1)
1

